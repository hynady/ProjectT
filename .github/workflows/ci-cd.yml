name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to production'
        type: boolean
        default: false

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Login Docker Hub
      - name: Docker Hub login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build & push backend
      - name: Build & push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./server-mono
          push: true
          tags: hnduy160103/projectt-backend:latest

      # Build & push frontend
      - name: Build & push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./user-client
          push: true
          tags: hnduy160103/projectt-frontend:latest
          build-args: |
            VITE_API_BASE_URL=/v1
            VITE_WS_BASE_URL=/ws
            VITE_ENABLE_MOCK=false

  deploy:
    needs: build-and-push
    if: github.event_name == 'push' || github.event.inputs.deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
  
      - name: Install sshpass
        run: sudo apt-get install -y sshpass
      
      # Nouvelle étape: Création du fichier .env à partir des secrets
      - name: Create .env file
        run: |
          cat > .env << EOL
          # -----------------------------------------------------------------------------
          # PRODUCTION ENVIRONMENT CONFIGURATION
          # -----------------------------------------------------------------------------
          # Tệp cấu hình này chứa tất cả biến môi trường cho cả Backend và Frontend
          # -----------------------------------------------------------------------------

          # -----------------------------------------------------------------------------
          # DEPLOYMENT CONFIGURATION
          # -----------------------------------------------------------------------------
          # Cấu hình cho quá trình triển khai tự động (CI/CD)
          SERVER_HOST=${{ secrets.SERVER_HOST }}
          SERVER_PORT=${{ secrets.SERVER_PORT }}
          SERVER_USER=${{ secrets.SERVER_USER }}
          SERVER_PASSWORD=${{ secrets.SERVER_PASSWORD }}
          DEPLOY_PATH=${{ secrets.DEPLOY_PATH }}
          # Cấu hình cho docker-hub
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}

          # -----------------------------------------------------------------------------
          # BACKEND CONFIGURATION
          # -----------------------------------------------------------------------------

          # Cấu hình ứng dụng
          APP_NAME=${{ secrets.APP_NAME || 'Tack Ticket API' }}

          # Cấu hình Database MySQL
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE || 'tackticket' }}
          # Không định nghĩa MYSQL_USER và MYSQL_PASSWORD vì chúng ta dùng root
          DB_DRIVER=${{ secrets.DB_DRIVER || 'com.mysql.cj.jdbc.Driver' }}
          # URL sử dụng tên service MySQL trong Docker network
          DB_URL=${{ secrets.DB_URL || 'jdbc:mysql://mysql:3306/tackticket?useSSL=false&allowPublicKeyRetrieval=true' }}
          MYSQL_USER=${{ secrets.MYSQL_USER || 'root' }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          JPA_DIALECT=${{ secrets.JPA_DIALECT || 'org.hibernate.dialect.MySQLDialect' }}
          JPA_DDL_AUTO=${{ secrets.JPA_DDL_AUTO || 'update' }}

          # Cấu hình Kafka
          # URL sử dụng tên service Kafka trong Docker network
          KAFKA_BOOTSTRAP_SERVERS=${{ secrets.KAFKA_BOOTSTRAP_SERVERS || 'kafka:9092' }}
          KAFKA_CONSUMER_GROUP_ID=${{ secrets.KAFKA_CONSUMER_GROUP_ID || 'ticket-service' }}
          KAFKA_CONSUMER_AUTO_OFFSET_RESET=${{ secrets.KAFKA_CONSUMER_AUTO_OFFSET_RESET || 'earliest' }}

          # Cấu hình bảo mật
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}

          # Cấu hình email
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          MAIL_SENDER_NAME=${{ secrets.MAIL_SENDER_NAME || 'Tack Ticket' }}

          # Cấu hình thanh toán
          SEPAY_API_KEY=${{ secrets.SEPAY_API_KEY }}
          SEPAY_URL=${{ secrets.SEPAY_URL || 'https://my.sepay.vn' }}

          # Cấu hình gRPC
          # Sử dụng '0.0.0.0' cho host để container có thể chấp nhận kết nối từ bên ngoài
          GRPC_OCCA_HOST=${{ secrets.GRPC_OCCA_HOST || '0.0.0.0' }}
          GRPC_OCCA_PORT=${{ secrets.GRPC_OCCA_PORT || '9090' }}
          GRPC_AUTH_HOST=${{ secrets.GRPC_AUTH_HOST || '0.0.0.0' }}
          GRPC_AUTH_PORT=${{ secrets.GRPC_AUTH_PORT || '9090' }}
          GRPC_TICKET_HOST=${{ secrets.GRPC_TICKET_HOST || '0.0.0.0' }}
          GRPC_TICKET_PORT=${{ secrets.GRPC_TICKET_PORT || '9090' }}

          # Cấu hình CORS
          # Đặt URL của frontend mà backend sẽ chấp nhận yêu cầu CORS từ đó
          FRONTEND_URL=${{ secrets.FRONTEND_URL || 'http://localhost:30000' }}

          # -----------------------------------------------------------------------------
          # FRONTEND CONFIGURATION
          # -----------------------------------------------------------------------------

          # API và WebSocket URLs - Sử dụng đường dẫn tương đối vì chúng ta dùng Nginx để proxy
          VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL || '/v1' }}
          VITE_WS_BASE_URL=${{ secrets.VITE_WS_BASE_URL || '/ws' }}

          # Tắt mock trong production
          VITE_ENABLE_MOCK=${{ secrets.VITE_ENABLE_MOCK || 'false' }}

          # Google Maps API Key
          VITE_GOOGLE_MAPS_API_KEY=${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}

          # Cấu hình Cloudinary
          VITE_CLOUDINARY_CLOUD_NAME=${{ secrets.VITE_CLOUDINARY_CLOUD_NAME }}
          VITE_CLOUDINARY_UPLOAD_PRESET=${{ secrets.VITE_CLOUDINARY_UPLOAD_PRESET }}
          VITE_CLOUDINARY_API_KEY=${{ secrets.VITE_CLOUDINARY_API_KEY }}
          EOL
          
          echo ".env file created successfully"
  
      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
  
      - name: Create deploy directory
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -e ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << EOF
            if [ ! -d "${{ secrets.DEPLOY_PATH }}" ]; then
              echo "Creating directory ${{ secrets.DEPLOY_PATH }}"
              mkdir -p "${{ secrets.DEPLOY_PATH }}"
            fi
          EOF
  
      - name: Copy docker-compose file and .env to server
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -e scp -P ${{ secrets.SERVER_PORT }} docker-compose.production.yml .env ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.DEPLOY_PATH }}/
  
      - name: Deploy to server
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -e ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << EOF
            cd "${{ secrets.DEPLOY_PATH }}" || exit 1
  
            echo "[1/3] Pulling latest images..."
            sudo docker-compose -f docker-compose.production.yml pull
  
            echo "[2/3] Restarting containers..."
            sudo docker-compose -f docker-compose.production.yml up -d
  
            echo "[3/3] Cleaning old images..."
            sudo docker image prune -f
          EOF