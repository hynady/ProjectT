name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to production'
        type: boolean
        default: false

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Login Docker Hub
      - name: Docker Hub login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build & push backend
      - name: Build & push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./server-mono
          push: true
          tags: hnduy160103/projectt-backend:latest

      # Build & push frontend
      - name: Build & push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./user-client
          push: true
          tags: hnduy160103/projectt-frontend:latest
          build-args: |
            VITE_API_BASE_URL=/v1
            VITE_WS_BASE_URL=/ws
            VITE_ENABLE_MOCK=false

  deploy:
    needs: build-and-push
    if: github.event_name == 'push' || github.event.inputs.deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
  
      - name: Install sshpass
        run: sudo apt-get install -y sshpass
  
      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
  
      - name: Create deploy directory
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -e ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << EOF
            if [ ! -d "${{ secrets.DEPLOY_PATH }}" ]; then
              echo "Creating directory ${{ secrets.DEPLOY_PATH }}"
              mkdir -p "${{ secrets.DEPLOY_PATH }}"
            fi
          EOF
  
      - name: Copy docker-compose file to server
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -e scp -P ${{ secrets.SERVER_PORT }} docker-compose.production.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.DEPLOY_PATH }}/
  
      - name: Deploy to server
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -e ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << EOF
            cd "${{ secrets.DEPLOY_PATH }}" || exit 1
  
            echo "[1/3] Pulling latest images..."
            sudo docker compose -f docker-compose.production.yml pull
  
            echo "[2/3] Restarting containers..."
            sudo docker compose -f docker-compose.production.yml up -d
  
            echo "[3/3] Cleaning old images..."
            sudo docker image prune -f
          EOF
